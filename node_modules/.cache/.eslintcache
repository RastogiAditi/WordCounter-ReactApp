[{"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\index.js":"1","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\App.js":"2","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\reportWebVitals.js":"3","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\TextForm.js":"4","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\About.js":"5","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\Alert.js":"6","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\Navbar.js":"7"},{"size":535,"mtime":1690281490977,"results":"8","hashOfConfig":"9"},{"size":1734,"mtime":1693055324388,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1690281491195,"results":"11","hashOfConfig":"9"},{"size":3996,"mtime":1691325115585,"results":"12","hashOfConfig":"9"},{"size":4984,"mtime":1693051048560,"results":"13","hashOfConfig":"9"},{"size":479,"mtime":1691061497822,"results":"14","hashOfConfig":"9"},{"size":1646,"mtime":1693055643330,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"31m9vb",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\index.js",[],[],"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\App.js",["39"],[],"// import {\n//   BrowserRouter,\n//   Routes,\n//   Route,\n//   // Link,\n//   // Outlet,\n// } from \"react-router-dom\";\nimport { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n\nfunction App() {\n//dark mode enbale fumction\n  const [mode,setMode]=useState('light');\n    const [alert,setAlert]=useState(null);\n\n    const showAlert=(msg,type)=>{\n      setAlert({\n        msg:msg,\n        type:type\n\n      })\n      setTimeout(()=>{\n        setAlert(null);\n      },2000);\n    }\n\n  const toggleMode=()=>{\n    if(mode=== 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor='grey';\n      showAlert(\"Dark Mode is on....... \",\"success\");\n    }\n    else{\n      setMode('light');\n      \n      document.body.style.backgroundColor='white';\n      showAlert(\"Light Mode is on....... \",\"success\");\n    }\n  }\n  return (\n  \n  //   <BrowserRouter>\n  //   <div>\n      \n  //   <Navbar title=\"WordCounter\" mode={mode} toggleMode={toggleMode}/>\n  //       <Alert alert={alert}/>\n  //       {/* <TextForm showAlert={showAlert} heading=\"Enter your text\" mode={mode} /> */}\n  //   <Routes>\n  //   <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter your text\" mode={mode} />}/>\n  //    <Route path=\"/about\" element={<About />} />      \n      \n  //   </Routes>\n  //   </div>\n  // </BrowserRouter>\n    <div>\n       <Navbar title=\"WordCounter\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n      <TextForm showAlert={showAlert} heading=\"Enter your text\" mode={mode} /> \n    </div>\n    \n    \n\n  );\n\n   \n  \n}\n\nexport default App;\n\n\n\n","C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\reportWebVitals.js",[],[],"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\TextForm.js",[],[],"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\About.js",[],[],"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\Alert.js",[],[],"C:\\Study_Material\\Programming\\WordCounter-ReactApp\\src\\components\\Navbar.js",["40","41"],[],"import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(props){\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-disabled=\"true\" to=\"/about\">About{props.aboutText}</Link>\r\n              </li> */}\r\n            </ul>\r\n           {/*dark mode switch.................... */}\r\n           <div className={`form-check form-switch text-${props.mode ==='light'? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\nNavbar.propTypes={title:PropTypes.string}\r\nexport default Navbar;",{"ruleId":"42","severity":1,"message":"43","line":10,"column":8,"nodeType":"44","messageId":"45","endLine":10,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":10,"column":11,"nodeType":"48","endLine":10,"endColumn":48},{"ruleId":"46","severity":1,"message":"47","line":17,"column":17,"nodeType":"48","endLine":17,"endColumn":77},"no-unused-vars","'About' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]